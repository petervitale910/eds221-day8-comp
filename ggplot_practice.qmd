---
title: "GGplot practice"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---
Attach packages
```{r}
pacman::p_load("tidyverse", "here", "janitor", "ggthemes",
               "paletteer")
```


#### GGplot basics
Read in lizard data

```{r}
lizards <- read_csv(here("data_tidy","lizards.csv"))
```

### The essentials

```{r}
ggplot(lizards, aes(x = total_length , y = weight))+
  geom_point() #very basic

#can do 3 ways 

ggplot(lizards)+
  geom_point(aes(x = total_length, 
                 y = weight))

ggplot()+
  geom_point(data = lizards , aes(x = total_length, y = weight)) #oh you actually have to specify data
```

can swap geometries
```{r}
ggplot(lizards, aes(x = total_length , y = weight))+
  geom_line()
```


some geoms only need one axis

```{r}
ggplot(lizards, aes(x = total_length ))+ 
         geom_histogram()
```

Jitterplots are usually best with one cat and one continuous var

```{r}
ggplot(lizards, aes(x = weight, y = common_name))+
  geom_jitter()
```


#### Aesthetic mapping

dont need to use aes()

```{r}
ggplot(lizards, aes(x= weight))+
  geom_histogram(color = "khaki1", 
                 fill = "#143109",
                 alpha = .5,
                 linetype = "dotted") #transparency)
```

##Updating aesthetics based on variables
in that case we need to use aes()

```{r}
ggplot(lizards, aes( x= total_length, y = weight))+
  geom_point(aes(color = common_name, #inside aes = apply different values accross data outside = apply same values
                 size = total_length), alpha = .3)+ #alpha outside aes
  theme(legend.position = "none")
```

#### Themes

  
```{r}
ggplot(lizards, aes(x = weight, y = site))+
  geom_jitter(aes(color = common_name))+
  theme_solarized(light = FALSE)+
  scale_color_solarized()+
  labs( x = "Weight (grams)", 
        y = "Study Site ID",
        title = "Lizard weights across sites at Jordama",
        color = "Species")+
  theme(plot.title = element_text(hjust = 0))
```


## reorder data
```{r}
lizard_counts <-  lizards %>% 
  count(common_name)

ggplot(data = lizard_counts, 
       aes(x = n, y= fct_reorder(common_name, n)))+
  geom_col()+
  labs( x = "Individuals (n)",
        y = "Species Common Name")
```

## advanced ggplot customization 

```{r}
ggplot(lizards , 
       aes(x = total_length , y = weight))+
  geom_point()+
  scale_x_continuous(breaks = c(0, 250, 500), 
                     limits = c(0,500))+#continuous data
  scale_y_continuous(breaks = seq(from = 0,
                                  to = 70,
                                  by = 10),#cool, axis along every 10
                     limits = c(0,70))+ 
  labs(x = "Total length (mm)", 
       y = "Weight (Grams)")+
  theme_clean()
```

```{r}
ggplot(lizards, aes(x = total_length , y = weight))+
  geom_point()+
  scale_x_log10() #log scale
```


```{r}
#counting lizards caught per day 
lizard_counts <- lizards %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  count(date)

ggplot(lizard_counts, aes(x = date, y = n))+
  geom_line()+
  scale_x_date(breaks = scales::breaks_width("2 years"),
               labels = scales::label_date("%Y"))
```
### customization of aesthetics with "scale_function 
```{r}
ggplot(lizards, aes(x = total_length, y = weight))+
  geom_point(aes(color = weight))+
  scale_color_gradient(low = "#F1D6B8", 
                       high = "#FBACBE")

#or

ggplot(lizards, aes(x = total_length, y = weight))+
  geom_point(aes(color = weight))+
  scale_color_gradientn(colors = c("orange", "red","purple", "navy", "black"))

#Might want to bin them 

ggplot(data = lizards,
       aes(x = total_length, 
           y = weight))+
  geom_point(aes(color = weight))+
  scale_color_steps(low = "red", high = "navy",
                    breaks = seq(0, 80, by = 5))
```

```{r}
ggplot( data = lizards,
        aes)
```

